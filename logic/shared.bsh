/*********************************** SHARED ***********************************/

int parseInt(String s) {
  try {
    return Integer.parseInt(s);
  } catch (Exception e) {
    return 0;
  }
}

List getTransectTabGroups() {
  List transectTabGroups = new ArrayList();

  for (tabGroup : getTabGroups()) {
    if (hasNoUi        (tabGroup)) continue;
    if (isFlaggedNodata(tabGroup)) continue;

    transectTabGroups.add(tabGroup);
  }

  return transectTabGroups;
}

List getTransectArchEntTypes() {
  List archEntTypes = new ArrayList();

  for (tabGroup : getTransectTabGroups())
    archEntTypes.add(getArchEntType(tabGroup));

  return archEntTypes;
}

boolean all(List booleans) {
  for (b : booleans)
    if (!b) return false;
  return true;
}

String funName(int ancestorIndex) {
  namespace = this.callstack.get(ancestorIndex);
  return namespace.getInvocationText();
}

final String TRANSECT_TYPES = listToSqlString(getTransectArchEntTypes());

final List DELETED_REFS = getRefsMatching(
    "*/(Northing)|(Easting)|(Accuracy)"
);

REF_TO_TYPE.keySet().removeAll(DELETED_REFS);
DATA_REFS           .removeAll(DELETED_REFS);
REFS_AS_HASH_SET = null;
