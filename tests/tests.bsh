final Map WEBVIEW_CONTENTS = new HashMap();

void populateWebViewHtml(String ref, String html) {
  WEBVIEW_CONTENTS.put(ref, html);
}

String getWebViewHtml(String ref) {
  return WEBVIEW_CONTENTS.get(ref);
}

// TRACKLOG GUIDE WEBVIEW UPDATES TO SHOW 'ENABLED'
{
  boolean isTrackingGPS() { return true; }

  executeOnEvent(
      getTabRef(TRACKLOG_GUIDE_REF),
      "show"
  );

  assert(getWebViewHtml(TRACKLOG_GUIDE_REF).equals("<p><b>Tracklog is: <span style='color: green'>Enabled</span></b></p><hr/>"));
}

// TRACKLOG GUIDE WEBVIEW UPDATES TO SHOW 'DISABLED'
{
  boolean isTrackingGPS() { return false; }

  executeOnEvent(
      getTabRef(TRACKLOG_GUIDE_REF),
      "show"
  );

  assert(getWebViewHtml(TRACKLOG_GUIDE_REF).equals("<p><b>Tracklog is: <span style='color: red'>Disabled</span></b></p><hr/>"));
}

// MODIFYING THE LIST RETURNED FROM `getRefsMatching` DOESN'T BREAK MEMOISATION
{
  String pattern = "*";

  List l1 = getRefsMatching(pattern);
  List l2 = new ArrayList(l1);
  l1.remove(l1.size() - 1);
  List l3 = getRefsMatching(pattern);

  assert(!l1.equals(l2));
  assert( l2.equals(l3));
}

// DATE AND TIME FIELDS GET SET FOR A TAB GROUP UPON CREATION AND DUPLICATION
{
  String tabGroup = "Setup_Trap";

  String date;  String refDate = tabGroup + "/Setting_up/Date";
  String time;  String refTime = tabGroup + "/Setting_up/Time";

  date = getFieldValue(refDate);  assert(isNull(date));
  time = getFieldValue(refTime);  assert(isNull(time));

  // Creation
  updateDisplayedTabGroup(tabGroup);
  executeOnEvent(tabGroup, "create");

  date = getFieldValue(refDate);  assert(!isNull(date));
  time = getFieldValue(refTime);  assert(!isNull(time));

  // Duplication
  setFieldValue(refDate, "");
  setFieldValue(refTime, "");

  date = getFieldValue(refDate);  assert(isNull(date));
  time = getFieldValue(refTime);  assert(isNull(time));

  updateDisplayedTabGroup(tabGroup);
  executeOnEvent(tabGroup, "create");

  date = getFieldValue(refDate);  assert(!isNull(date));
  time = getFieldValue(refTime);  assert(!isNull(time));
}

// WHEN `isTrackingGPS` IS TRUE, CLICKING 'Setting up Trap' SHOWS NO WARNING
// AND DOES NAVIGATE TO NEXT TAB GROUP
{
  boolean isTrackingGPS() { return true; }
  executeOnEvent("Start", "show");


  Runnable() {
    run() {
      executeOnEvent("Start/Main/Setting_up_Trap", "click");
    }
    return this;
  }

  String tabGroupBefore = getDisplayedTabGroup();
  String msgExpected = "";
  String msgActual   = getStdout(Runnable());
  String tabGroupAfter  = getDisplayedTabGroup();

  assert(msgExpected.equals(msgActual));
  assert("Start"     .equals(tabGroupBefore));
  assert("Setup_Trap".equals(tabGroupAfter ));
}

{
  assert(getAttribsMatchingRef("*/*/*Date").size() == 6);
}

// `listToSqlString`
{
  List a = new ArrayList();
  List b = new ArrayList();
  List c = new ArrayList();

  // Populate a (0 elements)

  // Populate b (1 element)
  b.add(1);

  // Populate b (2 elements)
  c.add(1);
  c.add("3");

  assert("()"        .equals(listToSqlString(a)));
  assert("('1')"     .equals(listToSqlString(b)));
  assert("('1', '3')".equals(listToSqlString(c)));
}

// CUSTOM SEARCH FUNCTIONS CAN BE CALLED WITHOUT ERROR
{
  Search() {
    // We'll run `search()` in `getStdout` to stop from `Log.d` cluttering test
    // output
    void run() { search(); }
    return this;
  }

  clearSearchResults();
  populateSelectUser();
  populateSelectDate();
  getStdout(Search());
}

// hasValidFieldsToSubmit
{
  String tabGroup = "Check_Trap";
  assert(!hasValidFieldsToSubmit(tabGroup));

  String lat = tabGroup + "/Checking/Latitude";
  String lon = tabGroup + "/Checking/Longitude";
  String bag = tabGroup + "/Checking/Bag_ID";

  assert(isValidRef(lat));
  assert(isValidRef(lon));
  assert(isValidRef(bag));

  setFieldValue(lat, "abc"); assert(!hasValidFieldsToSubmit(tabGroup));
  setFieldValue(lon, "abc"); assert(!hasValidFieldsToSubmit(tabGroup));
  setFieldValue(bag, "abc"); assert( hasValidFieldsToSubmit(tabGroup));
}

// submitAndReturn
{
  SubmitAndReturn(tabGroup) {
    void run () { submitAndReturn(tabGroup); }
    return this;
  }

  clearGpsInTabGroup("Setup_Trap");
  assert(!isNull(getStdout(SubmitAndReturn("Setup_Trap"))));

  String lat = "Setup_Trap/Setting_up/Latitude";
  String lon = "Setup_Trap/Setting_up/Longitude";

  setFieldValue(lat, "abc");
  setFieldValue(lon, "abc");

  assert(isNull(getStdout(SubmitAndReturn("Setup_Trap"))));
}

// validateUserTab
{
  ClickStart() {
    void run() { executeOnEvent("Login/Login/Start", "click"); }
    return this;
  }

  assert(!isNull(getStdout(ClickStart())));

  setFieldValue(REF_LOGIN_LOCATION, "asdf");
  assert(!isNull(getStdout(ClickStart())));

  setFieldValue(REF_LOGIN_USER, "asdf");
  assert( isNull(getStdout(ClickStart())));
}

// BAG ID IS CLEARED UPON DUPLICATION
{
  String tabGroup = "Check_Trap";

  String refBagId = tabGroup + "/Checking/Bag_ID";
  assert(isValidRef(refBagId));

  String valBagId() { return getFieldValue(refBagId); }

  setFieldValue(refBagId, "foo");
  assert(!isNull(valBagId()));

  updateDisplayedTabGroup(tabGroup);
  executeOnEvent(tabGroup, "copy");
  assert(isNull(valBagId()));
}
